import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var StatusBar = /** @class */ (function (_super) {
    __extends(StatusBar, _super);
    function StatusBar() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StatusBar.prototype.overlaysWebView = function (doesOverlay) { return cordova(this, "overlaysWebView", { "sync": true }, arguments); };
    StatusBar.prototype.styleDefault = function () { return cordova(this, "styleDefault", { "sync": true }, arguments); };
    StatusBar.prototype.styleLightContent = function () { return cordova(this, "styleLightContent", { "sync": true }, arguments); };
    StatusBar.prototype.styleBlackTranslucent = function () { return cordova(this, "styleBlackTranslucent", { "sync": true }, arguments); };
    StatusBar.prototype.styleBlackOpaque = function () { return cordova(this, "styleBlackOpaque", { "sync": true }, arguments); };
    StatusBar.prototype.backgroundColorByName = function (colorName) { return cordova(this, "backgroundColorByName", { "sync": true }, arguments); };
    StatusBar.prototype.backgroundColorByHexString = function (hexString) { return cordova(this, "backgroundColorByHexString", { "sync": true }, arguments); };
    StatusBar.prototype.hide = function () { return cordova(this, "hide", { "sync": true }, arguments); };
    StatusBar.prototype.show = function () { return cordova(this, "show", { "sync": true }, arguments); };
    Object.defineProperty(StatusBar.prototype, "isVisible", {
        get: function () { return cordovaPropertyGet(this, "isVisible"); },
        set: function (value) { cordovaPropertySet(this, "isVisible", value); },
        enumerable: false,
        configurable: true
    });
    StatusBar.pluginName = "StatusBar";
    StatusBar.plugin = "cordova-plugin-statusbar";
    StatusBar.pluginRef = "StatusBar";
    StatusBar.repo = "https://github.com/apache/cordova-plugin-statusbar";
    StatusBar.platforms = ["Android", "iOS", "Windows"];
StatusBar.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: StatusBar, factory: function StatusBar_Factory(t) { return ɵStatusBar_BaseFactory(t || StatusBar); }, providedIn: null });
const ɵStatusBar_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(StatusBar);
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(StatusBar, [{
        type: Injectable
    }], null, { overlaysWebView: [], styleDefault: [], styleLightContent: [], styleBlackTranslucent: [], styleBlackOpaque: [], backgroundColorByName: [], backgroundColorByHexString: [], hide: [], show: [], isVisible: [], isVisible: [] });
    return StatusBar;
}(IonicNativePlugin));
export { StatusBar };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9mbG9hdGluZy9wcm9qZWN0My9tb25vbGl0aC10by1taWNyb3NlcnZpY2VzLXByb2plY3QvdWRhZ3JhbS1mcm9udGVuZC9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9zdGF0dXMtYmFyL25neC9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0RBd0J3RDs7Ozs7OE9BR2xEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJb25pY05hdGl2ZVBsdWdpbiwgY29yZG92YSwgY29yZG92YVByb3BlcnR5R2V0LCBjb3Jkb3ZhUHJvcGVydHlTZXQgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xudmFyIFN0YXR1c0JhciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3RhdHVzQmFyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN0YXR1c0JhcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBTdGF0dXNCYXIucHJvdG90eXBlLm92ZXJsYXlzV2ViVmlldyA9IGZ1bmN0aW9uIChkb2VzT3ZlcmxheSkgeyByZXR1cm4gY29yZG92YSh0aGlzLCBcIm92ZXJsYXlzV2ViVmlld1wiLCB7IFwic3luY1wiOiB0cnVlIH0sIGFyZ3VtZW50cyk7IH07XG4gICAgU3RhdHVzQmFyLnByb3RvdHlwZS5zdHlsZURlZmF1bHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3Jkb3ZhKHRoaXMsIFwic3R5bGVEZWZhdWx0XCIsIHsgXCJzeW5jXCI6IHRydWUgfSwgYXJndW1lbnRzKTsgfTtcbiAgICBTdGF0dXNCYXIucHJvdG90eXBlLnN0eWxlTGlnaHRDb250ZW50ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29yZG92YSh0aGlzLCBcInN0eWxlTGlnaHRDb250ZW50XCIsIHsgXCJzeW5jXCI6IHRydWUgfSwgYXJndW1lbnRzKTsgfTtcbiAgICBTdGF0dXNCYXIucHJvdG90eXBlLnN0eWxlQmxhY2tUcmFuc2x1Y2VudCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmRvdmEodGhpcywgXCJzdHlsZUJsYWNrVHJhbnNsdWNlbnRcIiwgeyBcInN5bmNcIjogdHJ1ZSB9LCBhcmd1bWVudHMpOyB9O1xuICAgIFN0YXR1c0Jhci5wcm90b3R5cGUuc3R5bGVCbGFja09wYXF1ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmRvdmEodGhpcywgXCJzdHlsZUJsYWNrT3BhcXVlXCIsIHsgXCJzeW5jXCI6IHRydWUgfSwgYXJndW1lbnRzKTsgfTtcbiAgICBTdGF0dXNCYXIucHJvdG90eXBlLmJhY2tncm91bmRDb2xvckJ5TmFtZSA9IGZ1bmN0aW9uIChjb2xvck5hbWUpIHsgcmV0dXJuIGNvcmRvdmEodGhpcywgXCJiYWNrZ3JvdW5kQ29sb3JCeU5hbWVcIiwgeyBcInN5bmNcIjogdHJ1ZSB9LCBhcmd1bWVudHMpOyB9O1xuICAgIFN0YXR1c0Jhci5wcm90b3R5cGUuYmFja2dyb3VuZENvbG9yQnlIZXhTdHJpbmcgPSBmdW5jdGlvbiAoaGV4U3RyaW5nKSB7IHJldHVybiBjb3Jkb3ZhKHRoaXMsIFwiYmFja2dyb3VuZENvbG9yQnlIZXhTdHJpbmdcIiwgeyBcInN5bmNcIjogdHJ1ZSB9LCBhcmd1bWVudHMpOyB9O1xuICAgIFN0YXR1c0Jhci5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmRvdmEodGhpcywgXCJoaWRlXCIsIHsgXCJzeW5jXCI6IHRydWUgfSwgYXJndW1lbnRzKTsgfTtcbiAgICBTdGF0dXNCYXIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3Jkb3ZhKHRoaXMsIFwic2hvd1wiLCB7IFwic3luY1wiOiB0cnVlIH0sIGFyZ3VtZW50cyk7IH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0YXR1c0Jhci5wcm90b3R5cGUsIFwiaXNWaXNpYmxlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3Jkb3ZhUHJvcGVydHlHZXQodGhpcywgXCJpc1Zpc2libGVcIik7IH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7IGNvcmRvdmFQcm9wZXJ0eVNldCh0aGlzLCBcImlzVmlzaWJsZVwiLCB2YWx1ZSk7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTdGF0dXNCYXIucGx1Z2luTmFtZSA9IFwiU3RhdHVzQmFyXCI7XG4gICAgU3RhdHVzQmFyLnBsdWdpbiA9IFwiY29yZG92YS1wbHVnaW4tc3RhdHVzYmFyXCI7XG4gICAgU3RhdHVzQmFyLnBsdWdpblJlZiA9IFwiU3RhdHVzQmFyXCI7XG4gICAgU3RhdHVzQmFyLnJlcG8gPSBcImh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tc3RhdHVzYmFyXCI7XG4gICAgU3RhdHVzQmFyLnBsYXRmb3JtcyA9IFtcIkFuZHJvaWRcIiwgXCJpT1NcIiwgXCJXaW5kb3dzXCJdO1xuICAgIFN0YXR1c0Jhci5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUgfVxuICAgIF07XG4gICAgcmV0dXJuIFN0YXR1c0Jhcjtcbn0oSW9uaWNOYXRpdmVQbHVnaW4pKTtcbmV4cG9ydCB7IFN0YXR1c0JhciB9O1xuIl19